grf {
	grfid: "TT21";
	name: string(STR_GRF_NAME);
	desc: string(STR_GRF_DESC);
	url: string(STR_WEBSITE);
	version: 0;
	min_compatible_version: 0;
}

/* Disable base game industries */
disable_item(FEAT_INDUSTRIES);

/* Disable base game cargos */
disable_item(FEAT_CARGOS);

/* Increase base costs for funding industries to 32x the base cost. This gives us a greater range of possible purchase prices for funding industries.
 */
basecost {
	PR_BUILD_INDUSTRY: 6;
}

/* Create an error if OpenTTD version is before 1.10.0 (required for increased cargo types at industries) */
if (version_openttd(1,10,0,28004) > openttd_version) {
	error(FATAL, string(STR_ERROR_GAME_VERSION));
}

/* Create a fatal error if Improved Town Layouts is not loaded */
if (param["TT\03\01", 254] < 18) { error(FATAL, string(STR_ERROR_NO_ITL));}

/* Create an error if a conflicting industry replacement set is active - thanks to FIRS for much of this code */

if (grf_future_status("Meo\81")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "New Cargos"));}

if (grf_future_status("Meo\82")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "New Cargos Petrol + Tourists"));}

if (grf_future_status("\4D\65\6F\9D")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Houses"));}

if (grf_future_status("Meo\91")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Town Vector"));}

if (grf_future_status("Meo\92")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Basic Vector"));}

if (grf_future_status("\4D\65\6F\9F")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Basic vector II"));}

if (grf_future_status("Meo\93")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Chemical Vector"));}

if (grf_future_status("\4D\65\6F\9C")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Chemicals vector II"));}

if (grf_future_status("Meo\94")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Machinery Vector"));}

if (grf_future_status("Meo\95")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Wood Vector"));}

if (grf_future_status("Meo\96")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Construction Vector"));}

if (grf_future_status("Meo\97")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Agricultural Vector"));}

if (grf_future_status("Meo\98")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Basic for Arctic"));}

if (grf_future_status("Meo\99")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Basic for Tropic"));}

if (grf_future_status("Meo\9A")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Machinery for Tropic"));}

if (grf_future_status("Meo\9B")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Construction Vector by Pikkabird"));}

if (grf_future_status("Meo\9C")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Chemical Vector II"));}

if (grf_future_status("MCEe")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECSext"));}

if (grf_future_status("\4A\53\0A\70")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "ECS Industries Addon"));}

if (grf_future_status("SK\05\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\02")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\03")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\04")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("JS\0A\05")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Luukland Citybuilder"));}

if (grf_future_status("EX\01\02")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Ex Citybuilder"));}

if (grf_future_status("EX\01\03")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Ex Citybuilder"));}

if (grf_future_status("DD\06\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "UKRS Industries"));}

if (grf_future_status("frMI")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Manual Industries"));}

if (grf_future_status("SLTU")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Tourist Set"));}

if (grf_future_status("SZ\13D")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Oil well decrease neutralizer"));}

if (grf_future_status("EH\01\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Experts hard industries"));}

if (grf_future_status("DD\06\03")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "UKRS Brick Chain"));}

if (grf_future_status("DD\06\02")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Pikka Basic Industries"));}

if (grf_future_status("mb\08\00")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "NewCargos by Michael Blunck"));}

if (grf_future_status("EELS")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Eels"));}

if (grf_future_status("EN\15\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Apollo Rocket Industry Set"));}

if (grf_future_status("\F1%\00\05")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "FIRS 1"));}

if (grf_future_status("\F1%\00\06")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "FIRS 2"));}

if (grf_future_status("\F1%\00\07")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "FIRS 3"));}

if (grf_future_status("\F1%\00\08")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "FIRS 4"));}

if (grf_future_status("MCF1")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "FIXES"));}

if (grf_future_status("frMI")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Manual Industries II"));}

if (grf_future_status("McMi")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Manpower Industries"));}

if (grf_future_status("\45\4E\31\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "North Korean Industry Set"));}

if (grf_future_status("\52\54\4E\41")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Representative UK Train Set - Extended"));}

if (grf_future_status("\44\44\01\10")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Town and Industry - Basic Industries"));}

if (grf_future_status("\41\4C\01\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "station's name from nearby industries"));}

if (grf_future_status("\6A\54\72\83")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Wannaroo Basic Industries"));}

if (grf_future_status("\6A\64\72\04")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Wannaroo Extra Industries"));}

if (grf_future_status("\56\45\03\03")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "YETI Extended Towns and Industries"));}

if (grf_future_status("\4E\4D\11\13")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "North American Industry Set (NAIS)"));}

if (grf_future_status("\4A\44\88\07")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "XIS Extreme Industry Set"));}

if (grf_future_status("AZ\20\77")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Wasteland"));}

if (grf_future_status("GGQT")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "One Tile Industry Set"));}

if (grf_future_status("TT\04\01")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Improved Town Industries"));}

if (grf_future_status("TT20")) { error(FATAL, string(STR_ERROR_INCOMPATIBLE_SET, "Industries of the Caribbean"));}


/* *** Begin Cargos *** */

cargotable {
	PASS, COAL, MAIL, OIL_, GOOD, WOOD, PAPR, WDPR, RFPR, GRAI, FOOD,
}

// Original ID
item (FEAT_CARGOS, cargo_passengers, 0) {
	property {
		number:						0x00;
		sprite:						4297;
		type_name:					TTD_STR_CARGO_PLURAL_PASSENGERS;
		unit_name:					TTD_STR_CARGO_SINGULAR_PASSENGER;
		type_abbreviation:			TTD_STR_ABBREV_PASSENGERS;
		weight:						0.0625;
		is_freight:					0;
		cargo_classes:				bitmask(CC_PASSENGERS);
		cargo_label:				"PASS";
		town_growth_effect:			TOWNGROWTH_PASSENGERS;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_PASSENGERS;
		items_of_cargo:				TTD_STR_QUANTITY_PASSENGERS;
		penalty_lowerbound:			0;
		single_penalty_length:		22;
		station_list_colour:		152;
		cargo_payment_list_colour:	152;
		price_factor:				105;
		capacity_multiplier:		4;
	}
}

// Original ID
item (FEAT_CARGOS, cargo_coal, 0x01) {
	property {
		number:						0x01;
		sprite:						4298;
		type_name:					TTD_STR_CARGO_PLURAL_COAL;
		unit_name:					TTD_STR_CARGO_SINGULAR_COAL;
		type_abbreviation:			TTD_STR_ABBREV_COAL;
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_BULK);
		cargo_label:				"COAL";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		0;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				TTD_STR_QUANTITY_COAL;
		penalty_lowerbound:			30;
		single_penalty_length:		255;
		station_list_colour:		6;
		cargo_payment_list_colour:	6;
		price_factor:				56;
		capacity_multiplier:		1;		
	}
}

// Original ID
item (FEAT_CARGOS, cargo_mail, 0x02) {
	property {
		number:						0x02;
		sprite:						4299;
		type_name:					TTD_STR_CARGO_PLURAL_MAIL;
		unit_name:					TTD_STR_CARGO_SINGULAR_MAIL;
		type_abbreviation:			TTD_STR_ABBREV_MAIL;
		weight:						0.25;
		is_freight:					0;
		cargo_classes:				bitmask(CC_MAIL);
		cargo_label:				"MAIL";
		town_growth_effect:			TOWNGROWTH_MAIL;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_BAGS;
		items_of_cargo:				TTD_STR_QUANTITY_MAIL;
		penalty_lowerbound:			6;
		single_penalty_length:		24;
		station_list_colour:		15;
		cargo_payment_list_colour:	15;
		price_factor:				166;
		capacity_multiplier:		2;		
	}
}

// Original ID
item (FEAT_CARGOS, cargo_oil, 0x03) {
	property {
		number:						0x03;
		sprite:						4300;
		type_name:					TTD_STR_CARGO_PLURAL_OIL;
		unit_name:					TTD_STR_CARGO_SINGULAR_OIL;
		type_abbreviation:			TTD_STR_ABBREV_OIL;
		weight:						0.9;
		is_freight:					1;
		cargo_classes:				bitmask(CC_LIQUID);
		cargo_label:				"OIL_";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		0;
		units_of_cargo:				TTD_STR_LITERS;
		items_of_cargo:				TTD_STR_QUANTITY_OIL;
		penalty_lowerbound:			30;
		single_penalty_length:		255;
		station_list_colour:		171;
		cargo_payment_list_colour:	171;
		price_factor:				72;
		capacity_multiplier:		1;		
	}
}

// Livestock ID 0x04
item (FEAT_CARGOS, cargo_chemicals, 0x04) {
	property {
		number:						0x04;
		sprite:						4314;
		type_name:					string(STR_CARGO_NAME_CHEMICALS);
		unit_name:					string(STR_CARGO_NAME_CHEMICALS);
		type_abbreviation:			string(STR_CARGO_ABBREV_CHEMICALS);
		weight:						1.2;
		is_freight:					1;
		cargo_classes:				bitmask(CC_LIQUID, CC_POWDERIZED);
		cargo_label:				"RFPR";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_LITERS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_CHEMICALS);
		penalty_lowerbound:			20;
		single_penalty_length:		255;
		station_list_colour:		51;
		cargo_payment_list_colour:	51;
		price_factor:				126;
		capacity_multiplier:		1;		
	}
}

// Original ID
item (FEAT_CARGOS, cargo_goods, 0x05) {
	property {
		number:						0x05;
		sprite:						4302;
		type_name:					TTD_STR_CARGO_PLURAL_GOODS;
		unit_name:					TTD_STR_CARGO_SINGULAR_GOODS;
		type_abbreviation:			TTD_STR_ABBREV_GOODS;
		weight:						0.5;
		is_freight:					1;
		cargo_classes:				bitmask(CC_EXPRESS);
		cargo_label:				"GOOD";
		town_growth_effect:			TOWNGROWTH_WATER;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_CRATES;
		items_of_cargo:				TTD_STR_QUANTITY_GOODS;
		penalty_lowerbound:			10;
		single_penalty_length:		64;
		station_list_colour:		187;
		cargo_payment_list_colour:	187;
		price_factor:				144;
		capacity_multiplier:		2;		
	}
}

// Original ID
item (FEAT_CARGOS, cargo_wheat, 0x04) {
	property {
		number:						0x04;
		sprite:						4303;
		type_name:					TTD_STR_CARGO_PLURAL_WHEAT;
		unit_name:					TTD_STR_CARGO_SINGULAR_WHEAT;
		type_abbreviation:			string(STR_CARGO_ABBREV_CHEMICALS);
		weight:						1.0;
		is_freight:					1;
		cargo_classes:				bitmask(CC_BULK);
		cargo_label:				"GRAI";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				TTD_STR_QUANTITY_WHEAT;
		penalty_lowerbound:			4;
		single_penalty_length:		40;
		station_list_colour:		66;
		cargo_payment_list_colour:	66;
		price_factor:				114;
		capacity_multiplier:		1;		
	}
}

// Original ID
item (FEAT_CARGOS, cargo_wood, 0x07) {
	property {
		number:						0x07;
		sprite:						4304;
		type_name:					TTD_STR_CARGO_PLURAL_WOOD;
		unit_name:					TTD_STR_CARGO_SINGULAR_WOOD;
		type_abbreviation:			TTD_STR_ABBREV_WOOD;
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_PIECE_GOODS);
		cargo_label:				"WOOD";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		0;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				TTD_STR_QUANTITY_WOOD;
		penalty_lowerbound:			24;
		single_penalty_length:		255;
		station_list_colour:		85;
		cargo_payment_list_colour:	85;
		price_factor:				50;
		capacity_multiplier:		1;		
	}
}

item (FEAT_CARGOS, cargo_lumber, 0x08) {
	property {
		number:						0x08;
		sprite:						4307;
		type_name:					string(STR_CARGO_NAME_LUMBER);
		unit_name:					string(STR_CARGO_NAME_LUMBER);
		type_abbreviation:			string(STR_CARGO_ABBREV_LUMBER);
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_PIECE_GOODS);
		cargo_label:				"WDPR";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				string(STR_CARGO_QUANTITY_LUMBER);
		penalty_lowerbound:			18;
		single_penalty_length:		255;
		station_list_colour:		58;
		cargo_payment_list_colour:	58;
		price_factor:				93;
		capacity_multiplier:		1;		
	}
}

// Use Steel ID
item (FEAT_CARGOS, cargo_paper, 0x09) {
	property {
		number:						0x09;
		sprite:						4313;
		type_name:					TTD_STR_CARGO_PLURAL_PAPER;
		unit_name:					TTD_STR_CARGO_SINGULAR_PAPER;
		type_abbreviation:			TTD_STR_ABBREV_PAPER;
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_PIECE_GOODS);
		cargo_label:				"PAPR";
		town_growth_effect:			TOWNGROWTH_NONE;
		town_growth_multiplier:		0;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				TTD_STR_QUANTITY_PAPER;
		penalty_lowerbound:			14;
		single_penalty_length:		255;
		station_list_colour:		14;
		cargo_payment_list_colour:	14;
		price_factor:				110;
		capacity_multiplier:		1;		
	}
}

// Original ID, required for compatibility with older NewGRF house sets which hard-code cargo acceptance to cargo IDs rather than "FOOD"
item (FEAT_CARGOS, cargo_food, 0x0C) {
	property {
		number:						0x0C;
		sprite:						4312;
		type_name:					TTD_STR_CARGO_PLURAL_FOOD;
		unit_name:					TTD_STR_CARGO_SINGULAR_FOOD;
		type_abbreviation:			TTD_STR_ABBREV_FOOD;
		weight:						1;
		is_freight:					1;
		cargo_classes:				bitmask(CC_REFRIGERATED, CC_EXPRESS);
		cargo_label:				"FOOD";
		town_growth_effect:			TOWNGROWTH_FOOD;
		town_growth_multiplier:		1.0;
		units_of_cargo:				TTD_STR_TONS;
		items_of_cargo:				TTD_STR_QUANTITY_FOOD;
		penalty_lowerbound:			0;
		single_penalty_length:		24;
		station_list_colour:		48;
		cargo_payment_list_colour:	48;
		price_factor:				158;
		capacity_multiplier:		1;		
	}
}
/* Begin Functions */

/**
 * Bypass location check requirements if the industry is being funded or if we're in Scenario Editor.
 * @return 1 if the industry is being funded or we're in Scenario Editor, else 0 (the industry is being generated during map generation or during a game).
 */
switch (FEAT_INDUSTRIES, SELF, IsBeingFunded, (extra_callback_info2 == IND_CREATION_FUND || game_mode == GAMEMODE_EDITOR)) {return;}

/**
 * Helper function for IsWithinDistanceToTown()
 * Note: The sum of the radii is greater than simply the largest radii, but it means larger towns have a greater range for industry placement.
 * @returns the sum of the town's townzone radii. 
 */
 switch (FEAT_INDUSTRIES, PARENT, StoreTownRadii,   town_zone_0_radius_square +
                                                    town_zone_1_radius_square + 
                                                    town_zone_2_radius_square + 
                                                    town_zone_3_radius_square + 
                                                    town_zone_4_radius_square) {return;}

/**
 * Checks the distance from an industry to its parent town.
 * The townzone radii and Euclidean distance are both squared, so we need to sqaure the padding parameter to match.
 * @param padding Area around the town where industries can spawn.
 * @return 1 if the industry is within the given distance to the town, else 0.
 */
switch (FEAT_INDUSTRIES, SELF, IsWithinDistanceToTown, padding, (town_euclidean_dist(0,0) < ( (padding * padding) + StoreTownRadii()) ) ) {return;}

/**
 * Check if the industry is near a town - required for secondary industries.
 * @return 1 if near a town, else 0.
 */
 switch (FEAT_INDUSTRIES, SELF, IsNearTown, IsWithinDistanceToTown(15)) {return;}

/**
 * Check if an industry's parent town has sufficient population.
 * @param required The required population.
 * @return 1 if the town has the required population, else 0.
 */
 switch (FEAT_INDUSTRIES, PARENT, TownHasPopulation, required, population >= required) {return;}

/**
 * Check if there are any industries of a given type within a given distance.
 * @return 1 if there are no industries of the given type within the required distance, else 0.
 */
 switch (FEAT_INDUSTRIES, SELF, NoNearbyCompetitors, industrytype, required_distance, industry_distance(industrytype) > required_distance) {return;}

 /**
 * Check if an industry is within a range of elevation.
 * @param min_z elevation (inclusive)
 * @param max_z elevation (inclusive)
 * @return 1 if the industry is at or between the specified min and max elevations, else 0
 */
switch (FEAT_INDUSTRIES, SELF, IndustryElevationCheck, min_z, max_z, nearby_tile_height(0,0) >= min_z && nearby_tile_height(0,0) <= max_z) {return;}

/* Empty production block. */
produce (produce_none, [], [])

/* Consume idle workers (no cargo available to process). */ 
produce (produce_idle_workers, [PASS: (incoming_cargo_waiting("PASS") > 200) ? (incoming_cargo_waiting("PASS") / 8) : 3;], [], 0)

/* Check if we have idle workers to consume, else produce nothing. */
switch (FEAT_INDUSTRIES, SELF, switch_produce_idle, incoming_cargo_waiting("PASS") > 0) {
	1: produce_idle_workers;
	produce_none;
}
/* *** Begin Bakery *** */

/* Construction check for Bakery */
switch (FEAT_INDUSTRIES, SELF, loc_check_bakery, IsBeingFunded() || (IsNearTown() && TownHasPopulation(500) && NoNearbyCompetitors(industry_bakery, 128)))
	{1: return CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW;}

item (FEAT_INDUSTRIES, industry_bakery) {
	property {
		substitute:	INDUSTRYTYPE_FOOD_PROCESSING_PLANT;
		life_type: IND_LIFE_TYPE_PROCESSING;
		cargo_types: [
			accept_cargo("PASS"),
			accept_cargo("GRAI", produce_cargo("FOOD", 0.5)),
		];
		name: string(STR_NAME_BAKERY);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_NAME_BAKERY));
		prob_map_gen: 1;
		prob_in_game: 0;
		fund_cost_multiplier: 40;
	}
	graphics {
		location_check: loc_check_bakery;
	}
}

/* Begin Farm */

/* Override industrytiles to accept all cargos. */
item (FEAT_INDUSTRYTILES, ind_tile_farm_1) {
	property {
		substitute: 33;
		override: 33;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_farm_2) {
	property {
		substitute: 34;
		override: 34;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_farm_3) {
	property {
		substitute: 35;
		override: 35;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_farm_4) {
	property {
		substitute: 36;
		override: 36;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_farm_5) {
	property {
		substitute: 37;
		override: 37;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_farm_6) {
	property {
		substitute: 38;
		override: 38;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

/* Only plant new fields March through June. */
switch (FEAT_INDUSTRIES, SELF, switch_farm_production_check_1, (current_month > 1 && current_month < 6)) {return;}

/* Construction check for Farm */
switch (FEAT_INDUSTRIES, SELF, loc_check_farm, !IsNearTown() && IndustryElevationCheck(0, 2) && NoNearbyCompetitors(industry_farm, 20))
	{1: return CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW;}

/* Farms only harvest September through November. */

produce (produce_farm_boosted_harvest, 
    [],	// Consume
	[GRAI: 256;],																				// Produce
	0 																							// Don't run callback again
	)

produce (produce_farm_standard_harvest, 
    [],	// Consume
	[GRAI: 128;],																				// Produce
	0 																							// Don't run callback again
	)

switch (FEAT_INDUSTRIES, SELF, produce_farm_1, current_month >= 8 && current_month < 11) {1: produce_farm_standard_harvest; switch_produce_idle;}

item (FEAT_INDUSTRIES, industry_farm) {
	property {
		substitute: INDUSTRYTYPE_TEMPERATE_ARCTIC_FARM;
		life_type: IND_LIFE_TYPE_ORGANIC;
		cargo_types: [
            produce_cargo("GRAI", 0),
            ];
		spec_flags: bitmask(IND_FLAG_PLANT_FIELDS_PERIODICALLY, IND_FLAG_PLANT_FIELDS_WHEN_BUILT);
		name: string(STR_NAME_FARM);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_NAME_FARM));
		prob_map_gen: 1;
		prob_in_game: 0;
	}
	graphics {
		control_special: switch_farm_production_check_1;
        location_check: loc_check_farm;
        produce_256_ticks: produce_farm_1;
        /* Don't allow any production changes */
		build_prod_change: 16; // 100% production
		monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
	}
}

/* Begin Logging Camp */

/* Only cut trees December through March. */
switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_production_check_1, (current_month <= 2 || current_month == 11)) {return;}

item (FEAT_INDUSTRIES, industry_logging_camp) {
	property {
		substitute:	INDUSTRYTYPE_SAWMILL;
		life_type: IND_LIFE_TYPE_PROCESSING;
		cargo_types: [produce_cargo("WOOD", 0)];
		spec_flags:	bitmask(IND_FLAG_CUT_TREES);
		name: string(STR_NAME_LOGGING_CAMP);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_NAME_LOGGING_CAMP));
		prob_map_gen: 0;
		prob_in_game: 0;
		fund_cost_multiplier: 5;
	}
	graphics {
		control_special:		switch_logging_camp_production_check_1;
	}
}

/* *** Begin Paper Mill *** */

/* Construction check for Paper Mill */
switch (FEAT_INDUSTRIES, SELF, loc_check_paper_mill, IsBeingFunded() || (IsNearTown() && TownHasPopulation(500) && NoNearbyCompetitors(industry_paper_mill, 128)))
	{1: return CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW;}

item (FEAT_INDUSTRIES, industry_paper_mill) {
	property {
		substitute:	INDUSTRYTYPE_PAPER_MILL;
		life_type: IND_LIFE_TYPE_PROCESSING;
		cargo_types: [
			accept_cargo("PASS"),
			accept_cargo("WOOD", produce_cargo("PAPR", 1)),
			accept_cargo("RFPR"),
		];
		name: string(STR_NAME_PAPER_MILL);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_NAME_PAPER_MILL));
		prob_map_gen: 1;
		prob_in_game: 0;
		fund_cost_multiplier: 40;
	}
	graphics {
		location_check: loc_check_paper_mill;
	}
}
