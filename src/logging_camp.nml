/* Begin Logging Camp */

spritelayout sprlay_logging_camp_blank {
	ground {
		sprite: 3924;
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_logging_camp_0) {
	property {
		substitute: 11;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
	graphics {
		default: sprlay_logging_camp_blank;
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_logging_camp_1) {
	property {
		substitute: 11;
		override: 11;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_logging_camp_2) {
	property {
		substitute: 12;
		override: 12;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_logging_camp_3) {
	property {
		substitute: 13;
		override: 13;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_logging_camp_4) {
	property {
		substitute: 14;
		override: 14;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_logging_camp_5) {
	property {
		substitute: 15;
		override: 15;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

tilelayout industry_layout_logging_camp_1 {
	0,0: ind_tile_logging_camp_1;    0,1: ind_tile_logging_camp_0;
	1,0: ind_tile_logging_camp_0;    1,1: ind_tile_logging_camp_5;

}

/* Boosted production if Food is supplied */
produce (produce_logging_camp_boosted,
	[FOOD: 3;],     // Consume
	[],             // Produce (none, since cargo is produced by special flag behavior)
	0               // Don't run callback again
	)

/* Check for Food for normal or boosted production */
switch (FEAT_INDUSTRIES, SELF, switch_produce_logging_camp, incoming_cargo_waiting("FOOD") >= 3) {1: produce_logging_camp_boosted; produce_none;}

/* Don't build up too large a stockpile */
produce (produce_logging_camp_stockpile,
	[FOOD: 1;],               // Consume
	[],                       // Produce
	1                         // Run callback again
	)

switch (FEAT_INDUSTRIES, SELF, switch_stockpile_logging_camp, incoming_cargo_waiting("FOOD") > 4096) {1: produce_logging_camp_stockpile; produce_none;}

/* Only cut trees December through March. */
switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_production_check_2, (incoming_cargo_waiting("FOOD") >= 3 || current_day_of_month % 2 == 0)) {return;}
switch (FEAT_INDUSTRIES, SELF, switch_logging_camp_production_check_1, (current_month <= 2 || current_month == 11) && switch_logging_camp_production_check_2()) {return;}

item (FEAT_INDUSTRIES, industry_logging_camp, 25) {
	property {
		substitute:	INDUSTRYTYPE_SAWMILL;
		life_type: IND_LIFE_TYPE_PROCESSING;
		cargo_types: [
			accept_cargo("FOOD"),
			produce_cargo("WOOD", 0),
		];
		spec_flags:	bitmask(IND_FLAG_CUT_TREES);
		name: string(STR_NAME_LOGGING_CAMP);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_NAME_LOGGING_CAMP));
		layouts: [
			industry_layout_logging_camp_1
		];
		prob_map_gen: 0;
		prob_in_game: 0;
		fund_cost_multiplier: 4;
		map_colour: 85;
	}
	graphics {
		control_special: switch_logging_camp_production_check_1;
		produce_256_ticks: switch_produce_logging_camp;
		produce_cargo_arrival: switch_stockpile_logging_camp;
		extra_text_industry: string(STR_LOGGING_CAMP_HELPTEXT);
	}
}
