/* Begin Farm */

/* Override industrytiles to accept all cargos. */
item (FEAT_INDUSTRYTILES, ind_tile_farm_1) {
	property {
		substitute: 33;
		override: 33;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_farm_2) {
	property {
		substitute: 34;
		override: 34;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_farm_3) {
	property {
		substitute: 35;
		override: 35;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_farm_4) {
	property {
		substitute: 36;
		override: 36;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_farm_5) {
	property {
		substitute: 37;
		override: 37;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_farm_6) {
	property {
		substitute: 38;
		override: 38;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

/* Only plant new fields March through June, or when the map is generated. */
switch (FEAT_INDUSTRIES, SELF, switch_farm_production_check_1, (current_month > 1 && current_month < 6) || (date_loaded == current_date)) {return;}

/* Construction check for Farm */
switch (FEAT_INDUSTRIES, SELF, loc_check_farm, !IsNearTown() && IndustryElevationCheck(0, 1) && NoNearbyCompetitors(industry_farm, 40))
	{1: return CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW;}

/* BEGIN PRODUCTION: Read up from bottom */

/* Boosted production if Fertilizier is supplied */
produce (produce_farm_boosted,
	[FERT: 3;],     // Consume
	[GRAI: 128;],   // Produce
	0               // Don't run callback again
	)

/* Regular production */
produce (produce_farm,
	[],             // Consume
	[GRAI: 64;],    // Produce
	0               // Don't run callback again
	)

produce (produce_farm_idle,
	[FERT: 3;],     // Consume
	[],             // Produce
	0               // Don't run callback again
	)

/* Check for Fertilizier for normal or boosted production */
switch (FEAT_INDUSTRIES, SELF, switch_produce_farm_2, incoming_cargo_waiting("FERT") >= 3) {1: produce_farm_boosted; produce_farm;}

/* Even not during harvest months, consume Fertilizer*/
switch (FEAT_INDUSTRIES, SELF, switch_produce_farm_idle, incoming_cargo_waiting("FERT") >= 3) {1: produce_farm_idle; produce_none;}

/* Don't build up too large a stockpile */
produce (produce_farm_stockpile,
	[FERT: 1;],               // Consume
	[],                       // Produce
	1                         // Run callback again
	)
	
switch (FEAT_INDUSTRIES, SELF, switch_stockpile_farm, incoming_cargo_waiting("FERT") > 4096) {1: produce_farm_stockpile; produce_none;}

/* Farms only harvest September through November. */
switch (FEAT_INDUSTRIES, SELF, switch_produce_farm_1, current_month >= 8 && current_month < 11) {1: switch_produce_farm_2; switch_produce_farm_idle;}

/* END PRODUCTION */

item (FEAT_INDUSTRIES, industry_farm, 9) {
	property {
		substitute: INDUSTRYTYPE_TEMPERATE_ARCTIC_FARM;
		life_type: IND_LIFE_TYPE_ORGANIC;
		cargo_types: [
			accept_cargo("FERT"),
			produce_cargo("GRAI", 0),
            ];
		spec_flags: bitmask(IND_FLAG_PLANT_FIELDS_PERIODICALLY, IND_FLAG_PLANT_FIELDS_WHEN_BUILT);
		name: string(STR_NAME_FARM);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_NAME_FARM));
		prob_map_gen: 4;
		prob_in_game: 0;
		fund_cost_multiplier: 40;
		map_colour: 65;
	}
	graphics {
		control_special: switch_farm_production_check_1;
        location_check: loc_check_farm;
        produce_256_ticks: switch_produce_farm_1;
		produce_cargo_arrival: switch_stockpile_farm;
		extra_text_industry: string(STR_FARM_HELPTEXT);
        /* Don't allow any production changes */
		build_prod_change: 16; // 100% production
		monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
	}
}
