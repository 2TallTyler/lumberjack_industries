/* Begin Functions */

/* LOCATION CHECKS */

/**
 * Bypass location check requirements if the industry is being funded or if we're in Scenario Editor.
 * @return 1 if the industry is being funded or we're in Scenario Editor, else 0 (the industry is being generated during map generation or during a game).
 */
switch (FEAT_INDUSTRIES, SELF, IsBeingFunded, (extra_callback_info2 == IND_CREATION_FUND || game_mode == GAMEMODE_EDITOR)) {return;}

/**
 * Helper function for IsWithinDistanceToTown()
 * Note: The sum of the radii is greater than simply the largest radii, but it means larger towns have a greater range for industry placement.
 * @returns the sum of the town's townzone radii. 
 */
 switch (FEAT_INDUSTRIES, PARENT, StoreTownRadii,   town_zone_0_radius_square +
                                                    town_zone_1_radius_square + 
                                                    town_zone_2_radius_square + 
                                                    town_zone_3_radius_square + 
                                                    town_zone_4_radius_square) {return;}

/**
 * Checks the distance from an industry to its parent town.
 * The townzone radii and Euclidean distance are both squared, so we need to sqaure the padding parameter to match.
 * @param padding Area around the town where industries can spawn.
 * @return 1 if the industry is within the given distance to the town, else 0.
 */
switch (FEAT_INDUSTRIES, SELF, IsWithinDistanceToTown, padding, (town_euclidean_dist(0,0) < ( (padding * padding) + StoreTownRadii()) ) ) {return;}

/**
 * Check if the industry is near a town - required for secondary industries.
 * @return 1 if near a town, else 0.
 */
 switch (FEAT_INDUSTRIES, SELF, IsNearTown, IsWithinDistanceToTown(15)) {return;}

/**
 * Get a town's population.
 * @return the population of the town.
 */
 switch (FEAT_INDUSTRIES, PARENT, TownPopulation, population) {return;}

/**
 * Check if a town has a required population.
 * @param required The required population.
 * @return 1 if the town's population is over the given requirement, else 0.
 */
switch (FEAT_INDUSTRIES, SELF, TownHasPopulation, required, TownPopulation() > required) {return;}

/**
 * Check if a town has sufficient population to support a secondary industry.
 * @param The required population, set by NewGRF Parameters
 * @return 1 if the town has the required population, else 0.
 */
switch (FEAT_INDUSTRIES, SELF, TownHasSecondaryPopulation, TownPopulation() >= (param_secondary_pop + (param_secondary_pop * (industry_town_count(industry_bakery) + industry_town_count(industry_box_factory) + industry_town_count(industry_oil_refinery) + industry_town_count(industry_paper_mill) + industry_town_count(industry_furniture_factory) + industry_town_count(industry_sawmill))))) {return;}

/**
 * Check if there are any industries of a given type within a given distance.
 * @return 1 if there are no industries of the given type within the required distance, else 0.
 */
 switch (FEAT_INDUSTRIES, SELF, NoNearbyCompetitors, industrytype, required_distance, industry_distance(industrytype) > required_distance) {return;}

 /**
 * Check if an industry is within a range of elevation.
 * @param min_z elevation (inclusive)
 * @param max_z elevation (inclusive)
 * @return 1 if the industry is at or between the specified min and max elevations, else 0
 */
switch (FEAT_INDUSTRIES, SELF, IndustryElevationCheck, min_z, max_z, nearby_tile_height(0,0) >= min_z && nearby_tile_height(0,0) <= max_z) {return;}

/**
 * Check if a water-based industry is near land, or a land-based industry is near water
 * @param required distance from land/water
 * @return 1 if the industry is greater than the given distance from land/water, else 0
 */
switch (FEAT_INDUSTRIES, SELF, DistanceFromWaterOrLand, required, water_distance >= required) {return;}

/**
 * Calculate the x coordinate of an industry's northernmost tile.
 * @returns the x coordinate
 */
switch (FEAT_INDUSTRIES, SELF, GetTileX, var[0x80, 0, 0xFFFFFFFF] % map_x_edge) {return;}

/**
 * Calculate the y coordinate of an industry's northernmost tile.
 * @returns the y coordinate
 */
switch (FEAT_INDUSTRIES, SELF, GetTileY, var[0x80, 0, 0xFFFFFFFF] / map_x_edge) {return;}

/**
 * Checks if an industry is suitably close to the edge of the map
 * @returns 1 if it is close enouugh, else 0
 */
switch (FEAT_INDUSTRIES, SELF, IsNearMapEdge,
	(GetTileX() < 32) ||
	((map_x_edge - GetTileX()) < 32) ||
	(GetTileY() < 32) ||
	((map_y_edge - GetTileY()) < 32)
) {return;}

/* CARGO CALLBACKS */

/**
 * Get the default station rating based on the time since cargo was last picked up. Unchanged from vanilla OpenTTD mechanics.
 * @return The rating calculation.
 */
switch (FEAT_CARGOS, SELF, GetRatingFromTime, getbits(extra_callback_info2, 0, 8)) {
	0..3: return 130;
	4..6: return 95;
	7..12: return 50;
	13..21: return 25;
	return 0;
}

/**
 * Get the default station rating based on the amount of cargo waiting. Unchanged from vanilla OpenTTD mechanics.
 * @return The rating calculation.
 */
switch (FEAT_CARGOS, SELF, GetRatingFromCargo, getbits(extra_callback_info2, 8, 16)) {
	0..100: return 40;
	101..300: return 30;
	301..600: return 10;
	601..1000: return 0;
	1001..1500: return -35;
	return -90;
}

/**
 * Get the default station rating based on the speed of the last vehicle to pick up cargo. Unchanged from vanilla OpenTTD mechanics.
 * @return The rating calculation.
 */
switch (FEAT_CARGOS, SELF, GetRatingFromSpeed, getbits(extra_callback_info2, 24, 8)) {
	0..85: return 0;
	86..254: return (getbits(extra_callback_info2, 24, 8) - 85) / 4;
	return 42; // Max speed units is 255: (255 - 85) / 4 = 42
}

/**
 * Nerf station ratings if there is too much cargo stored there.
 * @param maximum The maximum storage allowed before nerfing the station rating for a given cargo.
 * @return 0 to nerf the rating if too much cargo is stored, else return the default rating calculation.
 */
switch (FEAT_CARGOS, SELF, MaxStationStorage, maximum, (getbits(extra_callback_info2, 8, 16) > maximum)) {
	1: return 0;
	return GetRatingFromTime() + GetRatingFromCargo() + GetRatingFromSpeed();
}

/* PRODUCTION BLOCKS */

/* Empty production block. */
produce (produce_none, [], [])

/* Consume idle workers (no cargo available to process). */ 
produce (produce_idle_workers, [PASS: (incoming_cargo_waiting("PASS") > 200) ? (incoming_cargo_waiting("PASS") / 8) : 3;], [], 0)

/* Check if we have idle workers to consume, else consume nothing. */
switch (FEAT_INDUSTRIES, SELF, switch_produce_idle, incoming_cargo_waiting("PASS") > 0) {
	1: produce_idle_workers;
	produce_none;
}

/**
  * Calculate the cargo profit if enabled in NewGRF parameters, or let the callback fail to use the default calculation.
  * This function scales the payment by the map size, so larger maps give greater payments to avoid running costs eating your profits.
  * Base game code scales this returned value by the cargo value and amount transported.
  * @return a custom cargo profit if param_static_payments is enabled, else return CB_FAILED.
  */
switch (FEAT_CARGOS, SELF, CargoProfit, param_static_payments) {1: return 128 + (map_max_edge / 8); return CB_FAILED;}
