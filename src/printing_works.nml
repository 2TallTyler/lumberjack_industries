/* *** Begin Box Factory *** */

item (FEAT_INDUSTRYTILES, ind_tile_printing_works_1) {
	property {
		substitute: 43;
		override: 43;
        accepted_cargos: [[PASS, 8]];
        special_FLAGS: BITMASK(INDTILE_FLAG_ACCEPT_aLL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_printing_works_2) {
	property {
		substitute: 44;
		override: 44;
        accepted_cargos: [[PASS, 8]];
        special_FLAGS: BITMASK(INDTILE_FLAG_ACCEPT_aLL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_printing_works_3) {
	property {
		substitute: 45;
		override: 45;
        accepted_cargos: [[PASS, 8]];
        special_FLAGS: BITMASK(INDTILE_FLAG_ACCEPT_aLL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_printing_works_4) {
	property {
		substitute: 46;
		override: 46;
        accepted_cargos: [[PASS, 8]];
        special_FLAGS: BITMASK(INDTILE_FLAG_ACCEPT_aLL);
	}
}

/* Construction check for Box Factory */
switch (FEAT_INDUSTRIES, SELF, loc_check_printing_works, IsBeingFunded() || (IsNearTown() && TownHasSecondaryPopulation() && NoNearbyCompetitors(industry_printing_works, 128)))
	{1: return CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW;}

/* BEGIN PRODUCTION: Read up from bottom */

produce (produce_printing_works,
    [PAPR: LOAD_TEMP(1);],                     // consume
    [MAIL: LOAD_TEMP(1); PASS: LOAD_TEMP(2);], // produce
    0                                          // don't run callback again
)

/* If we don't have enough stored, produce as much as we can anyway. */
switch (FEAT_INDUSTRIES, SELF, switch_produce_printing_works_min, [
    STORE_TEMP(incoming_cargo_waiting("PAPR"), 1), // Set the production amount to the current input stockpile
    STORE_TEMP((((LOAD_TEMP(1) / 4) * transported_last_month_pct("MAIL")) / 100), 2), // Set the passenger production level
    ]) {produce_printing_works;}

/* Determine the production level and see if we have enough stored to meet it. */
switch (FEAT_INDUSTRIES, SELF, switch_produce_printing_works_2, [
    STORE_TEMP(GetSecondaryProductionLevel(), 1), // Get production level
    STORE_TEMP((((LOAD_TEMP(1) / 4) * transported_last_month_pct("MAIL")) / 100), 2), // Set the passenger production level
    incoming_cargo_waiting("PAPR") > LOAD_TEMP(1), // Check if there's enough input cargo for this production level
    ]) {
        1: produce_printing_works;
        switch_produce_printing_works_min;
    }

/* If no cargo is waiting, bail out. */
switch (FEAT_INDUSTRIES, SELF, switch_produce_printing_works, incoming_cargo_waiting("PAPR") > 0)
    {
        1: switch_produce_printing_works_2;
        produce_none;
    }

/* END PRODUCTION */

item (FEAT_INDUSTRIES, industry_printing_works, 7) {
	property {
		substitute:	INDUSTRYTYPE_PRINTING_WORKS;
		life_type: IND_LIFE_TYPE_PROCESSING;
		cargo_types: [
			accept_cargo("PAPR"),
            produce_cargo("MAIL", 0),
            produce_cargo("PASS", 0),
		];
		name: string(STR_NAME_PRINTING_WORKS);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_NAME_PRINTING_WORKS));
		prob_map_gen: 1;
		prob_in_game: 0;
		fund_cost_multiplier: 40;
		map_colour: 95;
	}
	graphics {
		extra_text_industry: StringGetSecondaryHelptext();
        location_check: loc_check_printing_works;
		produce_256_ticks: switch_produce_printing_works;
		colour: COLOUR_DARK_GREEN;
		/* Don't allow any production changes */
		monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
	}
}
