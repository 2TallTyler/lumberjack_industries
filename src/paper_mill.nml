/* *** Begin Paper Mill *** */

item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_1) {
	property {
		substitute: 64;
		override: 64;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_2) {
	property {
		substitute: 65;
		override: 65;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_3) {
	property {
		substitute: 66;
		override: 66;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_4) {
	property {
		substitute: 67;
		override: 67;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_5) {
	property {
		substitute: 68;
		override: 68;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_6) {
	property {
		substitute: 69;
		override: 69;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_7) {
	property {
		substitute: 70;
		override: 70;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_paper_mill_8) {
	property {
		substitute: 71;
		override: 71;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

/* Construction check for Paper Mill */
switch (FEAT_INDUSTRIES, SELF, loc_check_paper_mill, IsBeingFunded() || (IsNearTown() && TownHasSecondaryPopulation() && NoNearbyCompetitors(industry_paper_mill, 128)))
	{1: return CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW;}

/* BEGIN PRODUCTION: Read up from bottom */

/** REGISTERS
  * 1: Target input consumption based on town size and transport goals
  * 2: Passenger production amount
  * 3: Amount of Wood Chips to consume
  * 4: Amount of Logs to comsume
  */ 

produce (produce_paper_mill,
    [WDCH: LOAD_TEMP(3); WOOD: LOAD_TEMP(4); QLME: LOAD_TEMP(1); RFPR: LOAD_TEMP(1); BAKE: LOAD_TEMP(1); COAL: LOAD_TEMP(1);], // consume
    [PAPR: LOAD_TEMP(1) * 2; COAT: LOAD_TEMP(1) / 2; ENSP: LOAD_TEMP(1) / 2; PASS: LOAD_TEMP(2);],                             // produce
    0                                                                                                                          // don't run callback again
)

/* Determine the production level */
switch (FEAT_INDUSTRIES, SELF, switch_produce_paper_mill_2, [
    /* Get the target production amount */
    STORE_TEMP(GetSecondaryProductionLevel(), 1),

    /* Adjust the target production to the lowest input stockpile */
    STORE_TEMP(min(LOAD_TEMP(1),
        min(
            min(
                min(incoming_cargo_waiting("RFPR"), incoming_cargo_waiting("BAKE")), 
                min(incoming_cargo_waiting("COAL"), incoming_cargo_waiting("QLME"))
            ),
            incoming_cargo_waiting("WDCH") + incoming_cargo_waiting("WOOD")
        )), 1),
    /* Use Wood Chips before Logs */
    STORE_TEMP(min(LOAD_TEMP(1), incoming_cargo_waiting("WDCH")), 3),
    /* Make up the rest in normal input. */
    STORE_TEMP(LOAD_TEMP(1) - LOAD_TEMP(3), 4),

    /* Set the passenger production amount. */
    STORE_TEMP((((LOAD_TEMP(1) / 4) * transported_last_month_pct("PAPR")) / 100), 2),
    ]) {produce_paper_mill;}

/* If no cargo is waiting, bail out. */
switch (FEAT_INDUSTRIES, SELF, switch_produce_paper_mill, 
    (incoming_cargo_waiting("WOOD") > 0 || incoming_cargo_waiting("WDCH")) && 
    incoming_cargo_waiting("QLME") > 0 &&
    incoming_cargo_waiting("RFPR") > 0 &&
    incoming_cargo_waiting("BAKE") > 0 &&
    incoming_cargo_waiting("COAL") > 0
    )
    {
        1: switch_produce_paper_mill_2;
        produce_none;
    }

/* END PRODUCTION */

item (FEAT_INDUSTRIES, industry_paper_mill, 14) {
	property {
		substitute:	INDUSTRYTYPE_PAPER_MILL;
		life_type: IND_LIFE_TYPE_PROCESSING;
		cargo_types: [
			accept_cargo("WOOD"),
            accept_cargo("WDCH"),
			accept_cargo("QLME"),
			accept_cargo("RFPR"),
            accept_cargo("BAKE"),
            accept_cargo("COAL"),
			produce_cargo("PAPR", 0),
			produce_cargo("COAT", 0),
			produce_cargo("ENSP", 0),
            produce_cargo("PASS", 0),
		];
		name: string(STR_NAME_PAPER_MILL);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_NAME_PAPER_MILL));
		spec_flags: bitmask(IND_FLAG_LONG_CARGO_TYPE_LISTS);
		prob_map_gen: 1;
		prob_in_game: 0;
		fund_cost_multiplier: 40;
		map_colour: 14;
	}
	graphics {
		extra_text_industry: StringGetSecondaryHelptext();
        location_check: loc_check_paper_mill;
		produce_256_ticks: switch_produce_paper_mill;
		/* Don't allow any production changes */
		monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
	}
}
