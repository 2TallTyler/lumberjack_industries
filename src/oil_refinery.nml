/* *** Begin Oil Refinery *** */

item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_1) {
	property {
		substitute: 18;
		override: 18;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_2) {
	property {
		substitute: 19;
		override: 19;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_3) {
	property {
		substitute: 20;
		override: 20;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_4) {
	property {
		substitute: 21;
		override: 21;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_5) {
	property {
		substitute: 22;
		override: 22;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_oil_refinery_6) {
	property {
		substitute: 23;
		override: 23;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

/* Construction check for Oil Refinery */
switch (FEAT_INDUSTRIES, SELF, loc_check_oil_refinery, IsBeingFunded() || (IsNearTown() && TownHasSecondaryPopulation() && NoNearbyCompetitors(industry_oil_refinery, 128)))
	{1: return CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW;}

/* BEGIN PRODUCTION: Read up from bottom */

produce (produce_oil_refinery,
    [OIL_: LOAD_TEMP(1);],                                                 // consume
    [RFPR: LOAD_TEMP(1) / 2; FUEL: LOAD_TEMP(1) / 2; PASS: LOAD_TEMP(2);], // produce
    0                                                                      // don't run callback again
)

/* If we don't have enough stored, produce as much as we can anyway. */
switch (FEAT_INDUSTRIES, SELF, switch_produce_oil_refinery_min, [
    STORE_TEMP(incoming_cargo_waiting("OIL_"), 1), // Set the production amount to the current input stockpile
    STORE_TEMP((((LOAD_TEMP(1) / 4) * transported_last_month_pct("RFPR")) / 100), 2), // Set the passenger production level
    ]) {produce_oil_refinery;}

/* Determine the production level and see if we have enough stored to meet it. */
switch (FEAT_INDUSTRIES, SELF, switch_produce_oil_refinery_2, [
    STORE_TEMP(GetSecondaryProductionLevel(), 1), // Get production level
    STORE_TEMP((((LOAD_TEMP(1) / 4) * transported_last_month_pct("RFPR")) / 100), 2), // Set the passenger production level
    incoming_cargo_waiting("OIL_") > LOAD_TEMP(1), // Check if there's enough input cargo for this production level
    ]) {
        1: produce_oil_refinery;
        switch_produce_oil_refinery_min;
    }

/* If no cargo is waiting, bail out. */
switch (FEAT_INDUSTRIES, SELF, switch_produce_oil_refinery, incoming_cargo_waiting("OIL_") > 0)
    {
        1: switch_produce_oil_refinery_2;
        produce_none;
    }

/* END PRODUCTION */

item (FEAT_INDUSTRIES, industry_oil_refinery, 4) {
	property {
		substitute:	INDUSTRYTYPE_OIL_REFINERY;
		life_type: IND_LIFE_TYPE_PROCESSING;
		cargo_types: [
			accept_cargo("OIL_"),
			produce_cargo("FUEL", 0),
			produce_cargo("RFPR", 0),
            produce_cargo("PASS", 0),
		];
		name: string(STR_NAME_OIL_REFINERY);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_NAME_OIL_REFINERY));
		prob_map_gen: 1;
		prob_in_game: 0;
		fund_cost_multiplier: 40;
		map_colour: 187;
	}
	graphics {
		extra_text_industry: StringGetSecondaryHelptext();
        location_check: loc_check_oil_refinery;
		produce_256_ticks: switch_produce_oil_refinery;
		colour: COLOUR_ORANGE;
		/* Don't allow any production changes */
		monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
	}
}
