/* *** Begin Bakery *** */

/* Override industrytiles to accept all cargos. */
item (FEAT_INDUSTRYTILES, ind_tile_bakery_1) {
	property {
		substitute: 60;
		override: 60;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_bakery_2) {
	property {
		substitute: 61;
		override: 61;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_bakery_3) {
	property {
		substitute: 62;
		override: 62;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_bakery_4) {
	property {
		substitute: 63;
		override: 63;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

/* BEGIN PRODUCTION: Read up from bottom */

produce (produce_bakery,
    [GRAI: LOAD_TEMP(1); PAPR: LOAD_TEMP(1);], // consume
    [FOOD: LOAD_TEMP(1) * 2; PASS: LOAD_TEMP(2);], // produce
    0                                          // don't run callback again
)

/* If we don't have enough stored, produce as much as we can anyway. */
switch (FEAT_INDUSTRIES, SELF, switch_produce_bakery_min, [
    STORE_TEMP(min(incoming_cargo_waiting("GRAI"), incoming_cargo_waiting("PAPR")), 1), // Set the production amount to the current input stockpile
    STORE_TEMP((((LOAD_TEMP(1) / 4) * transported_last_month_pct("FOOD")) / 100), 2), // Set the passenger production level
    ]) {produce_bakery;}

/* Determine the production level and see if we have enough stored to meet it. */
switch (FEAT_INDUSTRIES, SELF, switch_produce_bakery_2, [
    STORE_TEMP(GetSecondaryProductionLevel(), 1), // Get production level
    STORE_TEMP((((LOAD_TEMP(1) / 4) * transported_last_month_pct("FOOD")) / 100), 2), // Set the passenger production level
    min(incoming_cargo_waiting("GRAI"), incoming_cargo_waiting("PAPR")) > LOAD_TEMP(1), // Check if there's enough input cargo for this production level
    ]) {
        1: produce_bakery;
        switch_produce_bakery_min;
    }

/* If no cargo is waiting, bail out. */
switch (FEAT_INDUSTRIES, SELF, switch_produce_bakery, incoming_cargo_waiting("GRAI") > 0 && incoming_cargo_waiting("PAPR") > 0)
    {
        1: switch_produce_bakery_2;
        produce_none;
    }

/* END PRODUCTION */

/* Construction check for Bakery */
switch (FEAT_INDUSTRIES, SELF, loc_check_bakery, IsBeingFunded() || (IsNearTown() && TownHasSecondaryPopulation() && NoNearbyCompetitors(industry_bakery, 128)))
	{1: return CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW;}

item (FEAT_INDUSTRIES, industry_bakery, 13) {
	property {
		substitute:	INDUSTRYTYPE_FOOD_PROCESSING_PLANT;
		life_type: IND_LIFE_TYPE_PROCESSING;
		cargo_types: [
			accept_cargo("GRAI"),
			accept_cargo("PAPR"),
			produce_cargo("FOOD", 0),
            produce_cargo("PASS", 0),
		];
		name: string(STR_NAME_BAKERY);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_NAME_BAKERY));
		prob_map_gen: 1;
		prob_in_game: 0;
		fund_cost_multiplier: 40;
		map_colour: 51;
	}
	graphics {
		extra_text_industry: StringGetSecondaryHelptext();
        location_check: loc_check_bakery;
		produce_256_ticks: switch_produce_bakery;
		colour: COLOUR_YELLOW;
		/* Don't allow any production changes */
		monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
	}
}
