/* *** Begin Bakery *** */

/* Override industrytiles to accept all cargos. */
item (FEAT_INDUSTRYTILES, ind_tile_bakery_1) {
	property {
		substitute: 60;
		override: 60;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_bakery_2) {
	property {
		substitute: 61;
		override: 61;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_bakery_3) {
	property {
		substitute: 62;
		override: 62;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

item (FEAT_INDUSTRYTILES, ind_tile_bakery_4) {
	property {
		substitute: 63;
		override: 63;
		special_flags: bitmask(INDTILE_FLAG_ACCEPT_ALL);
	}
}

/* BEGIN PRODUCTION: Read up from bottom */

produce (produce_bakery_efficient,
	[PASS: 2; GRAI: 4; MNSP: 2;],   // Consume
	[FOOD: 4;],                     // Produce
	1                               // Run callback again
	)

produce (produce_bakery_basic,
	[PASS: 2; GRAI: 4; MNSP: 2;],   // Consume
	[FOOD: 2;],                     // Produce
	1                               // Run callback again
	)

/* Is production boosted by Packaging? */
switch (FEAT_INDUSTRIES, SELF, switch_produce_bakery_packaging, incoming_cargo_waiting("MNSP") > 0) {
	1: produce_bakery_efficient;
	produce_bakery_basic;
}

/* Consume extra Packaging */
produce (produce_bakery_packaging_stockpile,
	[GRAI: 1;],               // Consume
	[],                       // Produce
	1                         // Run callback again
	)

/* Consume extra Grain */
produce (produce_bakery_grain_stockpile,
	[GRAI: 1;],               // Consume
	[],                       // Produce
	1                         // Run callback again
	)

/* Should we consume extra Packaging? */
switch (FEAT_INDUSTRIES, SELF, switch_produce_bakery_idle_2, incoming_cargo_waiting("MNSP") > 4096) {
	1: produce_bakery_packaging_stockpile;
	switch_produce_idle;
}

/* We don't have both Workers and Grain. Which do we consume? */
switch (FEAT_INDUSTRIES, SELF, switch_produce_bakery_idle, incoming_cargo_waiting("GRAI") > 4096) {
	1: produce_bakery_grain_stockpile;
	switch_produce_bakery_idle_2;
}

/* Check if we have both Workers and Grain */
switch (FEAT_INDUSTRIES, SELF, switch_produce_bakery, (incoming_cargo_waiting("PASS") >= 2 && incoming_cargo_waiting("GRAI") >= 4)) {
	1: switch_produce_bakery_packaging;
	switch_produce_bakery_idle;
}

/* END PRODUCTION */

/* Construction check for Bakery */
switch (FEAT_INDUSTRIES, SELF, loc_check_bakery, IsBeingFunded() || (IsNearTown() && TownHasPopulation(500) && NoNearbyCompetitors(industry_bakery, 128)))
	{1: return CB_RESULT_LOCATION_ALLOW; return CB_RESULT_LOCATION_DISALLOW;}

item (FEAT_INDUSTRIES, industry_bakery, 13) {
	property {
		substitute:	INDUSTRYTYPE_FOOD_PROCESSING_PLANT;
		life_type: IND_LIFE_TYPE_PROCESSING;
		cargo_types: [
			accept_cargo("PASS"),
			accept_cargo("GRAI"),
			accept_cargo("MNSP"),
			produce_cargo("FOOD", 0),
		];
		name: string(STR_NAME_BAKERY);
		nearby_station_name: string(STR_STATION, string(STR_TOWN), string(STR_NAME_BAKERY));
		prob_map_gen: 1;
		prob_in_game: 0;
		fund_cost_multiplier: 40;
	}
	graphics {
		location_check: loc_check_bakery;
		produce_cargo_arrival: switch_produce_bakery;
		/* Don't allow any production changes */
		monthly_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
		random_prod_change: CB_RESULT_IND_PROD_NO_CHANGE;
	}
}
